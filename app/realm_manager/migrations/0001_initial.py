# Generated by Django 5.0.6 on 2024-06-14 12:35

import django.core.validators
import django.db.models.deletion
import realm_manager.fields
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='GameWorld',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Object creation datetime.')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Last updated datetime.')),
                ('name', models.CharField(max_length=255)),
                ('code', models.CharField(max_length=255, unique=True)),
                ('start', models.DateTimeField()),
                ('end', models.DateTimeField()),
            ],
            options={
                'ordering': ('-created_at',),
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Account',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Object creation datetime.')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Last updated datetime.')),
                ('name', models.CharField(max_length=255)),
                ('race', models.CharField(choices=[('ELF', 'Elf'), ('DWARF', 'Dwarf')], max_length=10)),
                ('economy', models.CharField(choices=[('MULTI', 'Multi Resource'), ('WOOD', 'Single Wood'), ('IRON', 'Single Iron'), ('CROP', 'Single Crop')], max_length=10)),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='owned_accounts', to=settings.AUTH_USER_MODEL)),
                ('game_world', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='accounts', to='realm_manager.gameworld')),
            ],
            options={
                'ordering': ('-created_at',),
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Player',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Object creation datetime.')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Last updated datetime.')),
                ('account', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='players', to='realm_manager.account')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='player_accounts', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ('-created_at',),
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Realm',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Object creation datetime.')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Last updated datetime.')),
                ('name', models.CharField(max_length=255)),
                ('game_world', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='realms', to='realm_manager.gameworld')),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='owned_realms', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ('-created_at',),
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='account',
            name='realm',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='accounts', to='realm_manager.realm'),
        ),
        migrations.CreateModel(
            name='Schedule',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Object creation datetime.')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Last updated datetime.')),
                ('monday', realm_manager.fields.DayScheduleField(base_field=models.PositiveIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(288)]), blank=True, default=list, size=None)),
                ('tuesday', realm_manager.fields.DayScheduleField(base_field=models.PositiveIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(288)]), blank=True, default=list, size=None)),
                ('wednesday', realm_manager.fields.DayScheduleField(base_field=models.PositiveIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(288)]), blank=True, default=list, size=None)),
                ('thursday', realm_manager.fields.DayScheduleField(base_field=models.PositiveIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(288)]), blank=True, default=list, size=None)),
                ('friday', realm_manager.fields.DayScheduleField(base_field=models.PositiveIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(288)]), blank=True, default=list, size=None)),
                ('saturday', realm_manager.fields.DayScheduleField(base_field=models.PositiveIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(288)]), blank=True, default=list, size=None)),
                ('sunday', realm_manager.fields.DayScheduleField(base_field=models.PositiveIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(288)]), blank=True, default=list, size=None)),
                ('player', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='schedule', to='realm_manager.player')),
            ],
            options={
                'ordering': ('-created_at',),
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ScheduleException',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Object creation datetime.')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Last updated datetime.')),
                ('day', models.DateField()),
                ('changes', realm_manager.fields.DayScheduleField(base_field=models.PositiveIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(288)]), blank=True, default=list, size=None)),
                ('schedule', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='exceptions', to='realm_manager.schedule')),
            ],
            options={
                'ordering': ('-created_at',),
                'abstract': False,
            },
        ),
        migrations.AddConstraint(
            model_name='scheduleexception',
            constraint=models.UniqueConstraint(fields=('schedule', 'day'), name='one_exception_per_day'),
        ),
    ]
